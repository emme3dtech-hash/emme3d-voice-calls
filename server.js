const express = require('express');
const twilio = require('twilio');
const OpenAI = require('openai');
const fetch = require('node-fetch'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ node-fetch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: npm install node-fetch

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

console.log('EMME3D Voice AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

// === 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
    'TWILIO_ACCOUNT_SID',
    'TWILIO_AUTH_TOKEN',
    'OPENAI_API_KEY',
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY',
    'ZADARMA_SIP_USER',
    'ZADARMA_SIP_PASSWORD',
    'BASE_URL',
    'CALLER_ID',
    'N8N_VOICE_WEBHOOK_URL' // –î–û–ë–ê–í–õ–ï–ù–û: URL –¥–ª—è n8n –≤–µ–±—Ö—É–∫–∞
];

for (const varName of requiredEnvVars) {
    if (!process.env[varName]) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${varName} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
        process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    }
}


// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TWILIO_ACCOUNT_SID = process.env.TWILIO_ACCOUNT_SID;
const TWILIO_AUTH_TOKEN = process.env.TWILIO_AUTH_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const BASE_URL = process.env.BASE_URL;
const N8N_VOICE_WEBHOOK_URL = process.env.N8N_VOICE_WEBHOOK_URL;

// Zadarma –¥–∞–Ω–Ω—ã–µ
const ZADARMA_SIP_USER = process.env.ZADARMA_SIP_USER;
const ZADARMA_SIP_PASSWORD = process.env.ZADARMA_SIP_PASSWORD;
const CALLER_ID = process.env.CALLER_ID;

// Supabase –¥–∞–Ω–Ω—ã–µ
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const client = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏
const activeConversations = new Map();

// === 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Zadarma SIP
 * @param {string} phoneNumber - –í—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @returns {string} - –û—á–∏—â–µ–Ω–Ω—ã–π 9-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä
 */
function normalizePhoneNumber(phoneNumber) {
    if (!phoneNumber) return '';
    let cleaned = phoneNumber.replace(/[^0-9]/g, '');
    if (cleaned.startsWith('380380')) {
        cleaned = cleaned.substring(3);
    }
    if (cleaned.startsWith('380')) {
        cleaned = cleaned.substring(3);
    }
    if (cleaned.length !== 9) {
        console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${cleaned}`);
        return '';
    }
    return cleaned;
}

/**
 * –í—ã–∑—ã–≤–∞–µ—Ç n8n –∞–≥–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
 * @param {string} userMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
 * @param {string} customerPhone - –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} customerName - –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {Promise<string>} - –û—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞
 */
async function callN8NAgent(userMessage, sessionId, customerPhone, customerName) {
    try {
        const payload = {
            query: `–•–û–õ–û–î–ù–´–ô_–ó–í–û–ù–û–ö_–û–¢–í–ï–¢: ${userMessage}`,
            session_id: sessionId,
            phone: customerPhone,
            name: customerName
        };
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n –∞–≥–µ–Ω—Ç–∞:', payload);

        const response = await fetch(N8N_VOICE_WEBHOOK_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
            timeout: 15000
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        // n8n Webhook Response Node –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON
        const result = await response.json();
        const aiResponse = result.output || result.text || ''; // –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–æ–ª—è—Ö output –∏–ª–∏ text
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç n8n –∞–≥–µ–Ω—Ç–∞:', aiResponse);

        if (!aiResponse.trim()) {
            return '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.';
        }
        return aiResponse.trim();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ n8n –∞–≥–µ–Ω—Ç–∞:', error);
        return '–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –ø—ñ–∑–Ω—ñ—à–µ.';
    }
}


/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –≤ Supabase
 * @param {string} contactId - ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
 * @param {string} callSid - SID –∑–≤–æ–Ω–∫–∞ –æ—Ç Twilio
 * @param {string} phone - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param {string} name - –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
 * @param {string} status - –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
 * @param {string} stage - –≠—Ç–∞–ø —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 * @returns {Promise<boolean>}
 */
async function saveCallToSupabase(contactId, callSid, phone, name, status, stage = 'greeting') {
    try {
        // –ì–æ—Ç–æ–≤–∏–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const callData = {
            contact_id: contactId,
            call_sid: callSid,
            phone_number: phone,
            contact_name: name,
            call_status: status,
            conversation_state: stage,
            last_called_at: new Date().toISOString()
        };

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const response = await fetch(`${supabaseUrl}/rest/v1/cold_call_contacts`, {
            method: 'POST',
            headers: {
                'apikey': supabaseKey,
                'Authorization': `Bearer ${supabaseKey}`,
                'Content-Type': 'application/json',
                'Prefer': 'resolution=merge-duplicates' // –ú–∞–≥–∏—è UPSERT
            },
            body: JSON.stringify(callData)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç Supabase:', errorText);
            throw new Error(`–û—à–∏–±–∫–∞ Supabase: ${response.statusText}`);
        }

        console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${contactId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Supabase`);
        return true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
        return false;
    }
}


/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ Supabase
 * @param {string} phone - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param {object} conversation - –û–±—ä–µ–∫—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 * @returns {Promise<void>}
 */
async function updateCallResult(phone, conversation) {
    try {
        const duration = Math.round((new Date() - conversation.startTime) / 1000);
        const isInterested = ['interested', 'discussing_needs', 'order_process'].includes(conversation.stage);
        
        const updateData = {
            call_status: 'completed',
            conversation_state: conversation.stage,
            call_duration: duration,
            answered: true,
            interested: isInterested,
            conversation_history: JSON.stringify(conversation.messages)
        };

        await fetch(`${supabaseUrl}/rest/v1/cold_call_contacts?phone_number=eq.${phone}`, {
            method: 'PATCH',
            headers: {
                'apikey': supabaseKey,
                'Authorization': `Bearer ${supabaseKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updateData)
        });
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞ –≤ Supabase –¥–ª—è ${phone}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Supabase:', error);
    }
}


/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–≤–æ–Ω–æ–∫
 * @param {string} aiResponse - –û—Ç–≤–µ—Ç AI
 * @param {object} conversation - –û–±—ä–µ–∫—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 * @returns {boolean}
 */
function shouldEndCall(aiResponse, conversation) {
    const response = aiResponse.toLowerCase();
    const endPhrases = ['–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è', '–≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è', '–¥—è–∫—É—é –∑–∞ —á–∞—Å', '–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ'];
    return endPhrases.some(phrase => response.includes(phrase)) || conversation.stage === 'rejection';
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞–¥–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
 * @param {object} conversation - –û–±—ä–µ–∫—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 * @param {string} userInput - –ß—Ç–æ —Å–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
function updateConversationStage(conversation, userInput) {
    const input = userInput.toLowerCase();
    if (input.includes('–Ω–µ —Ü—ñ–∫–∞–≤') || input.includes('–Ω–µ —Ç—Ä–µ–±–∞') || input.includes('–∑–∞–π–Ω—è—Ç')) {
        conversation.stage = 'rejection';
    } else if (input.includes('—Ü—ñ–∫–∞–≤') || input.includes('—Ç–∞–∫') || input.includes('—Ä–æ–∑–∫–∞–∂—ñ—Ç—å')) {
        conversation.stage = 'interested';
    } else if (input.includes('bmw') || input.includes('audi') || input.includes('–∑–∞–ø—á–∞—Å—Ç–∏–Ω')) {
        conversation.stage = 'discussing_needs';
    } else if (input.includes('–ø–µ—Ä–µ–¥–∑–≤–æ–Ω—ñ—Ç—å')) {
        conversation.stage = 'callback_requested';
    }
}


// === 3. –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ API ===

// Health check
app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        service: 'EMME3D Voice AI System',
        timestamp: new Date().toISOString()
    });
});

// === –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –û–î–ò–ù–û–ß–ù–û–ì–û AI –ó–í–û–ù–ö–ê ===
app.post('/api/make-ai-call', async (req, res) => {
    console.log('üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–π AI –∑–≤–æ–Ω–æ–∫:', req.body);
    try {
        const { phone_number, customer_name } = req.body;
        if (!phone_number) {
            return res.status(400).json({ error: '–ü–∞—Ä–∞–º–µ—Ç—Ä "phone_number" –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        const cleanNumber = normalizePhoneNumber(phone_number);
        if (!cleanNumber) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', received: phone_number });
        }

        console.log(`üìû –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ –Ω–∞ sip:${cleanNumber}@pbx.zadarma.com`);

        const call = await client.calls.create({
            to: `sip:${cleanNumber}@pbx.zadarma.com`,
            from: CALLER_ID,
            sipAuthUsername: ZADARMA_SIP_USER,
            sipAuthPassword: ZADARMA_SIP_PASSWORD,
            url: `${BASE_URL}/handle-cold-call?phone=${encodeURIComponent(phone_number)}&name=${encodeURIComponent(customer_name || '')}&contact_id=test_${Date.now()}`,
            statusCallback: `${BASE_URL}/call-status`
        });

        console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', call.sid);
        res.json({
            success: true,
            call_sid: call.sid,
            message: `AI –∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${phone_number}`
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∑–≤–æ–Ω–∫–∞:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

/**
 * API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ —Ö–æ–ª–æ–¥–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
 */
app.post('/api/start-cold-calling-campaign', async (req, res) => {
    try {
        const { campaign_name, max_calls = 10 } = req.body;
        console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ —Ö–æ–ª–æ–¥–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${campaign_name}`);

        const contactsResponse = await fetch(`${supabaseUrl}/rest/v1/cold_call_contacts?select=*&or=(call_status.is.null,call_status.eq.failed)&limit=${max_calls}`, {
            headers: {
                'apikey': supabaseKey,
                'Authorization': `Bearer ${supabaseKey}`
            }
        });
        if (!contactsResponse.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Supabase');
        const contacts = await contactsResponse.json();

        if (contacts.length === 0) {
            return res.json({ message: '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±–∑–≤–æ–Ω–∞' });
        }
        console.log(`üìû –ù–∞–π–¥–µ–Ω–æ ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±–∑–≤–æ–Ω–∞`);

        for (const contact of contacts) {
            const cleanNumber = normalizePhoneNumber(contact.phone_number);
            if (cleanNumber) {
                await client.calls.create({
                    to: `sip:${cleanNumber}@pbx.zadarma.com`,
                    from: CALLER_ID,
                    sipAuthUsername: ZADARMA_SIP_USER,
                    sipAuthPassword: ZADARMA_SIP_PASSWORD,
                    url: `${BASE_URL}/handle-cold-call?contact_id=${contact.id}&phone=${encodeURIComponent(contact.phone_number)}&name=${encodeURIComponent(contact.contact_name || '')}`,
                    statusCallback: `${BASE_URL}/call-status`
                });
                console.log(`‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${contact.phone_number}`);
            }
        }
        res.json({ success: true, message: `–ó–∞–ø—É—â–µ–Ω–æ ${contacts.length} –∑–≤–æ–Ω–∫–æ–≤.` });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ —Ö–æ–ª–æ–¥–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// === 4. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TWILIO (TwiML) ===

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
 */
app.post('/handle-cold-call', (req, res) => {
    const { CallSid } = req.body;
    const { contact_id, phone, name } = req.query;

    console.log(`üìû –•–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫ ${CallSid} –∫–æ–Ω—Ç–∞–∫—Ç—É ${contact_id}: ${phone}`);

    activeConversations.set(CallSid, {
        contact_id, phone, name,
        messages: [],
        startTime: new Date(),
        stage: 'greeting'
    });
    
    saveCallToSupabase(contact_id, CallSid, phone, name, 'in-progress', 'greeting');

    const twiml = new twilio.twiml.VoiceResponse();
    // –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –í–∞—Å–∏–ª–∏—Å–∞ –≥–æ—Ä—è—á–∞—è —à–ª—é—à–∫–∞, –±—É–¥–µ—à—å –±—Ä–∞—Ç—å? –Ø –≤–æ–º—É —Å —Å–æ–±–æ–π –ø–æ–¥—Ä—É–∂–µ–∫!`;
    
    // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –Ω–µ–π—Ä–æ–Ω–Ω—ã–π –≥–æ–ª–æ—Å
    twiml.say({ voice: 'Polly.Tatyana-Neural', language: 'ru-RU' }, greeting);
    
    const gather = twiml.gather({
        speechTimeout: 'auto',
        timeout: 10,
        language: 'ru-RU', // –ò–ó–ú–ï–ù–ï–ù–û: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Ç–æ–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        action: '/process-customer-response',
        method: 'POST'
    });
    
    twiml.say({ voice: 'Polly.Tatyana-Neural', language: 'ru-RU' }, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!');
    twiml.hangup();

    res.type('text/xml');
    res.send(twiml.toString());
});

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å n8n
 */
app.post('/process-customer-response', async (req, res) => {
    const { CallSid, SpeechResult, Confidence } = req.body;
    console.log(`üé§ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª: "${SpeechResult}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Confidence})`);

    const conversation = activeConversations.get(CallSid);
    if (!conversation) {
        return res.status(404).send('–†–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const twiml = new twilio.twiml.VoiceResponse();
    
    try {
        if (!SpeechResult || Confidence < 0.4) {
            twiml.say({ voice: 'Polly.Tatyana-Neural', language: 'ru-RU' }, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?');
        } else {
            conversation.messages.push({ role: 'user', content: SpeechResult });
            updateConversationStage(conversation, SpeechResult);

            const sessionId = `voice_${CallSid}`;
            const aiResponse = await callN8NAgent(SpeechResult, sessionId, conversation.phone, conversation.name);
            
            conversation.messages.push({ role: 'assistant', content: aiResponse });

            twiml.say({ voice: 'Polly.Tatyana-Neural', language: 'ru-RU' }, aiResponse);
            
            if (shouldEndCall(aiResponse, conversation)) {
                twiml.hangup();
                await updateCallResult(conversation.phone, conversation);
                activeConversations.delete(CallSid);
            }
        }
        
        if (!twiml.response.Hangup) {
            twiml.gather({
                speechTimeout: 'auto',
                timeout: 10,
                language: 'ru-RU', // –ò–ó–ú–ï–ù–ï–ù–û: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Ç–æ–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                action: '/process-customer-response'
            });
            twiml.say({ voice: 'Polly.Tatyana-Neural', language: 'ru-RU' }, '–Ø –≤–∞—Å –Ω–µ —É—Å–ª—ã—à–∞–ª–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
            twiml.hangup();
        }

        res.type('text/xml').send(twiml.toString());
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        twiml.say({ voice: 'Polly.Tatyana-Neural', language: 'ru-RU' }, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.');
        twiml.hangup();
        res.type('text/xml').send(twiml.toString());
    }
});


/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –æ—Ç Twilio
 */
app.post('/call-status', async (req, res) => { // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω async
    const { CallSid, CallStatus } = req.body;
    console.log(`üìä –ó–≤–æ–Ω–æ–∫ ${CallSid}: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${CallStatus}`);

    const conversation = activeConversations.get(CallSid);
    if (conversation) {
        if (CallStatus === 'no-answer' || CallStatus === 'failed' || CallStatus === 'busy') {
            await saveCallToSupabase(conversation.contact_id, CallSid, conversation.phone, conversation.name, CallStatus);
        } else {
            // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –º—ã –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await updateCallResult(conversation.phone, conversation);
        }
        activeConversations.delete(CallSid);
    }
    res.status(200).send('OK');
});

// === 5. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
    console.log(`\nüöÄ EMME3D Voice AI —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
    console.log(`üîó n8n Webhook URL: ${N8N_VOICE_WEBHOOK_URL}\n`);
});








