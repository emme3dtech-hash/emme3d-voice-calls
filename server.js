const express = require('express');
const twilio = require('twilio');

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

console.log('EMME3D Voice AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TWILIO_ACCOUNT_SID = process.env.TWILIO_ACCOUNT_SID;
const TWILIO_AUTH_TOKEN = process.env.TWILIO_AUTH_TOKEN;
const BASE_URL = process.env.BASE_URL || 'https://emme3d-voice-calls-production.up.railway.app';

// Zadarma –¥–∞–Ω–Ω—ã–µ
const ZADARMA_SIP_USER = process.env.ZADARMA_SIP_USER;
const CALLER_ID = process.env.CALLER_ID || '+380914811639';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const client = TWILIO_ACCOUNT_SID ? twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN) : null;

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
const activeConversations = new Map();

// === –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê ===
function normalizePhoneNumber(phoneNumber) {
  if (!phoneNumber) return '';
  
  let cleaned = phoneNumber.replace(/[^0-9]/g, '');
  console.log(`–®–∞–≥ 1 - —É–±—Ä–∞–ª–∏ —Å–∏–º–≤–æ–ª—ã: "${phoneNumber}" ‚Üí "${cleaned}"`);
  
  if (cleaned.startsWith('380380')) {
    cleaned = cleaned.substring(3);
    console.log(`–®–∞–≥ 2 - —É–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚Üí "${cleaned}"`);
  }
  
  if (cleaned.startsWith('380')) {
    cleaned = cleaned.substring(3);
    console.log(`–®–∞–≥ 3 - —É–±—Ä–∞–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã: ‚Üí "${cleaned}"`);
  }
  
  if (cleaned.length !== 9) {
    console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞: ${cleaned.length} —Ü–∏—Ñ—Ä`);
    return '';
  }
  
  console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è Zadarma: "${cleaned}"`);
  return cleaned;
}

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    service: 'EMME3D Voice AI System',
    timestamp: new Date().toISOString(),
    config: {
      twilio_configured: !!TWILIO_ACCOUNT_SID,
      zadarma_configured: !!ZADARMA_SIP_USER,
      base_url: BASE_URL
    }
  });
});

// Test endpoint
app.get('/test', (req, res) => {
  res.json({
    message: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!',
    timestamp: new Date().toISOString(),
    endpoints: [
      'GET /health',
      'GET /test', 
      'POST /api/make-ai-call',
      'POST /handle-outbound-call',
      'POST /process-customer-response'
    ]
  });
});

// === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø AI –ó–í–û–ù–ö–ê ===
app.post('/api/make-ai-call', async (req, res) => {
  console.log('üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ AI –∑–≤–æ–Ω–æ–∫');
  console.log('Body:', req.body);
  
  try {
    const { phone_number, customer_name } = req.body;
    
    if (!phone_number) {
      return res.status(400).json({ 
        error: 'phone_number –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        received_body: req.body 
      });
    }

    if (!client) {
      return res.status(500).json({ 
        error: 'Twilio –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ TWILIO_ACCOUNT_SID –∏ TWILIO_AUTH_TOKEN'
      });
    }

    console.log(`üìû –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º AI –∑–≤–æ–Ω–æ–∫ –Ω–∞ ${phone_number}`);
    
    const cleanNumber = normalizePhoneNumber(phone_number);
    
    if (!cleanNumber) {
      return res.status(400).json({ 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        received_number: phone_number 
      });
    }

    console.log(`üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫ –Ω–∞: sip:${cleanNumber}@pbx.zadarma.com`);
    
    const call = await client.calls.create({
      to: `sip:${cleanNumber}@pbx.zadarma.com`,
      from: '+380914811639',
      sipAuthUsername: process.env.ZADARMA_SIP_USER,
      sipAuthPassword: process.env.ZADARMA_SIP_PASSWORD,
      url: `${BASE_URL}/handle-outbound-call?phone=${encodeURIComponent(phone_number)}&name=${encodeURIComponent(customer_name || '')}`,
      statusCallback: `${BASE_URL}/call-status`,
      record: true
    });

    console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω:', call.sid);

    res.json({
      success: true,
      call_sid: call.sid,
      message: `AI –∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${phone_number}`,
      customer_name: customer_name,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∑–≤–æ–Ω–∫–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø ===
function generateGreeting(customerName) {
  const greetings = [
    `–ü—Ä–∏–≤—ñ—Ç${customerName ? `, ${customerName}` : ''}! –¶–µ –û–ª–µ–Ω–∞ –∑ –∫–æ–º–ø–∞–Ω—ñ—ó EMME3D. –ú–∏ –¥—Ä—É–∫—É—î–º–æ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –Ω–∞ 3D –ø—Ä–∏–Ω—Ç–µ—Ä—ñ. –£ –≤–∞—Å —î —Ö–≤–∏–ª–∏–Ω–∫–∞?`,
    `–î–æ–±—Ä–æ–≥–æ –¥–Ω—è${customerName ? `, ${customerName}` : ''}! –î–∑–≤–æ–Ω—é –∑ EMME3D. –ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –∞–≤—Ç–æ–≤–ª–∞—Å–Ω–∏–∫–∞–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ —á–µ—Ä–µ–∑ 3D –¥—Ä—É–∫. –ú–æ–∂—É —Ä–æ–∑–∫–∞–∑–∞—Ç–∏ –±—ñ–ª—å—à–µ?`
  ];
  
  return greetings[Math.floor(Math.random() * greetings.length)];
}

// === –û–ë–†–ê–ë–û–¢–ö–ê –ò–°–•–û–î–Ø–©–ï–ì–û –ó–í–û–ù–ö–ê ===
app.post('/handle-outbound-call', (req, res) => {
  const callSid = req.body.CallSid;
  const customerPhone = req.query.phone;
  const customerName = req.query.name;

  console.log(`üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ ${callSid} –Ω–∞ ${customerPhone}`);

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  activeConversations.set(callSid, {
    phone: customerPhone,
    name: customerName,
    messages: [],
    startTime: new Date(),
    stage: 'greeting'
  });

  const twiml = new twilio.twiml.VoiceResponse();

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const greeting = generateGreeting(customerName);
  twiml.say({
    voice: 'Polly.Joanna',
    language: 'uk-UA',
    rate: '0.85'
  }, greeting);

  // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
  const gather = twiml.gather({
    speechTimeout: 'auto',
    timeout: 12,
    speechModel: 'experimental_conversations',
    language: 'uk-UA', 
    enhanced: true,
    action: '/process-customer-response',
    method: 'POST'
  });

  // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –º–æ–ª—á–∏—Ç
  twiml.say({
    voice: 'Polly.Joanna',
    language: 'uk-UA'
  }, '–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!');
  
  twiml.hangup();

  res.type('text/xml');
  res.send(twiml.toString());
});

// === –ü–†–û–°–¢–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê ===
function generateSimpleResponse(userInput, conversation) {
  const input = userInput.toLowerCase();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞
  if (input.includes('–Ω–µ —Ü—ñ–∫–∞–≤') || input.includes('–Ω–µ —Ç—Ä–µ–±–∞') || input.includes('–Ω–µ —Ö–æ—á—É') || input.includes('–∑–∞–π–Ω—è—Ç')) {
    conversation.stage = 'rejection';
    return '–ó—Ä–æ–∑—É–º—ñ–ª–æ! –î—è–∫—É—é –∑–∞ —á–∞—Å. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!';
  }
  
  if (input.includes('—Ü—ñ–∫–∞–≤') || input.includes('—Ç–∞–∫') || input.includes('—Ä–æ–∑–∫–∞–∂—ñ—Ç—å')) {
    conversation.stage = 'interested';
    return '–ß—É–¥–æ–≤–æ! –ú–∏ –¥—Ä—É–∫—É—î–º–æ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –∑–∞ 1-3 –¥–Ω—ñ. –Ø–∫–∞ —É –≤–∞—Å –º–∞—à–∏–Ω–∞?';
  }
  
  if (input.includes('bmw') || input.includes('–±–º–≤') || input.includes('audi') || input.includes('–∞—É–¥—ñ') || 
      input.includes('mercedes') || input.includes('–º–µ—Ä—Å–µ–¥–µ—Å')) {
    conversation.stage = 'discussing_needs';
    return '–í—ñ–¥–º—ñ–Ω–Ω–æ! –ó —Ü—ñ—î—é –º–∞—Ä–∫–æ—é –ø—Ä–∞—Ü—é—î–º–æ —á–∞—Å—Ç–æ. –Ø–∫—ñ —Å–∞–º–µ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?';
  }
  
  if (input.includes('–∑–∞–ø—á–∞—Å—Ç–∏') || input.includes('–¥–µ—Ç–∞–ª—å') || input.includes('—á–∞—Å—Ç–∏–Ω–∞')) {
    return '–ú–∏ –º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏ –º–∞–π–∂–µ –±—É–¥—å-—è–∫—É –¥–µ—Ç–∞–ª—å –∑–∞ —Ñ–æ—Ç–æ –∞–±–æ –∫—Ä–µ—Å–ª–µ–Ω–Ω—è–º. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –Ω–∞ +380914811639';
  }
  
  if (input.includes('—Ü—ñ–Ω–∞') || input.includes('—Å–∫—ñ–ª—å–∫–∏') || input.includes('–≤–∞—Ä—Ç—ñ—Å—Ç—å')) {
    return '–¶—ñ–Ω–∞ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –ó–∞–∑–≤–∏—á–∞–π –≤—ñ–¥ 200 –¥–æ 2000 –≥—Ä–∏–≤–µ–Ω—å. –î–µ—Ç–∞–ª—ñ –æ–±–≥–æ–≤–æ—Ä–∏–º–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.';
  }
  
  if (input.includes('–ø—ñ–∑–Ω—ñ—à–µ') || input.includes('–ø–æ–¥—É–º–∞—é')) {
    conversation.stage = 'maybe_later';
    return '–ó–≤–∏—á–∞–π–Ω–æ! –ù–∞—à –Ω–æ–º–µ—Ä +380914811639. –ë—É–¥–µ–º–æ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏!';
  }
  
  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
  return '–†–æ–∑—É–º—ñ—é. –ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –∑ 3D –¥—Ä—É–∫–æ–º –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞–º +380914811639';
}

// === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –ö–õ–ò–ï–ù–¢–ê ===
app.post('/process-customer-response', (req, res) => {
  const callSid = req.body.CallSid;
  const speechResult = req.body.SpeechResult;
  const confidence = req.body.Confidence;

  console.log(`üé§ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª: "${speechResult}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence})`);

  const conversation = activeConversations.get(callSid);
  if (!conversation) {
    console.log('‚ùå –†–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', callSid);
    return res.status(404).send('–†–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  const twiml = new twilio.twiml.VoiceResponse();

  // –ï—Å–ª–∏ —Ä–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —á–µ—Ç–∫–æ
  if (!speechResult || confidence < 0.4) {
    twiml.say({
      voice: 'Polly.Joanna',
      language: 'uk-UA'
    }, '–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏?');

    const gather = twiml.gather({
      speechTimeout: 'auto',
      timeout: 10,
      action: '/process-customer-response'
    });

    return res.type('text/xml').send(twiml.toString());
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  conversation.messages.push({ 
    role: 'user', 
    content: speechResult,
    timestamp: new Date()
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
  const aiResponse = generateSimpleResponse(speechResult, conversation);
  
  conversation.messages.push({ 
    role: 'assistant', 
    content: aiResponse,
    timestamp: new Date()
  });

  // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
  twiml.say({
    voice: 'Polly.Joanna',
    language: 'uk-UA',
    rate: '0.85'
  }, aiResponse);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
  if (shouldEndCall(aiResponse, conversation)) {
    twiml.hangup();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞
    saveCallResult(conversation);
    activeConversations.delete(callSid);
    
  } else {
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    const gather = twiml.gather({
      speechTimeout: 'auto',
      timeout: 15,
      action: '/process-customer-response',
      speechModel: 'experimental_conversations',
      language: 'uk-UA'
    });

    twiml.say('–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É! –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!');
    twiml.hangup();
  }

  res.type('text/xml');
  res.send(twiml.toString());
});

// === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ó–í–û–ù–ö–ê ===
function shouldEndCall(aiResponse, conversation) {
  const response = aiResponse.toLowerCase();
  const maxDuration = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
  const currentDuration = new Date() - conversation.startTime;
  
  return (
    response.includes('–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è') ||
    response.includes('–≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è') ||
    response.includes('–¥—è–∫—É—é –∑–∞ —á–∞—Å') ||
    conversation.stage === 'rejection' ||
    conversation.messages.length > 8 ||
    currentDuration > maxDuration
  );
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ó–í–û–ù–ö–ê ===
function saveCallResult(conversation) {
  try {
    const result = {
      phone: conversation.phone,
      name: conversation.name,
      duration: Math.round((new Date() - conversation.startTime) / 1000),
      messages_count: conversation.messages.length,
      stage: conversation.stage,
      completed_at: new Date().toISOString()
    };

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞:', result);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
  }
}

// === –°–¢–ê–¢–£–° –ó–í–û–ù–ö–û–í ===
app.post('/call-status', (req, res) => {
  const callSid = req.body.CallSid;
  const callStatus = req.body.CallStatus;
  
  console.log(`üìä –ó–≤–æ–Ω–æ–∫ ${callSid}: —Å—Ç–∞—Ç—É—Å ${callStatus}`);
  
  if (callStatus === 'completed' || callStatus === 'failed') {
    const conversation = activeConversations.get(callSid);
    if (conversation) {
      saveCallResult(conversation);
      activeConversations.delete(callSid);
    }
  }
  
  res.status(200).send('OK');
});

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–´–• –ó–í–û–ù–ö–û–í ===
app.get('/api/active-calls', (req, res) => {
  const calls = Array.from(activeConversations.entries()).map(([callSid, conv]) => ({
    call_sid: callSid,
    phone: conv.phone,
    name: conv.name,
    stage: conv.stage,
    duration: Math.round((new Date() - conv.startTime) / 1000),
    messages_count: conv.messages.length
  }));

  res.json({
    active_calls: calls.length,
    calls: calls
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ EMME3D Voice AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('üìû –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
  console.log('  POST /api/make-ai-call - AI –∑–≤–æ–Ω–æ–∫');  
  console.log('  GET /api/active-calls - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏');
  console.log('  GET /health - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã');
  console.log('  GET /test - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã');
  console.log('');
  console.log('üéØ –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ async –ø—Ä–æ–±–ª–µ–º!');
  console.log('üîÑ –ì–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
});
