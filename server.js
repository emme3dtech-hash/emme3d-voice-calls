const express = require('express');
const twilio = require('twilio');
const OpenAI = require('openai');

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

console.log('EMME3D Voice AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TWILIO_ACCOUNT_SID = process.env.TWILIO_ACCOUNT_SID;
const TWILIO_AUTH_TOKEN = process.env.TWILIO_AUTH_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const BASE_URL = process.env.BASE_URL || 'https://emme3d-voice-calls-production.up.railway.app';

// Zadarma –¥–∞–Ω–Ω—ã–µ
const ZADARMA_SIP_USER = process.env.ZADARMA_SIP_USER;
const CALLER_ID = process.env.CALLER_ID || '+16105357813';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const client = TWILIO_ACCOUNT_SID ? twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN) : null;
const openai = OPENAI_API_KEY ? new OpenAI({ apiKey: OPENAI_API_KEY }) : null;

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
const activeConversations = new Map();

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    service: 'EMME3D Voice AI System',
    timestamp: new Date().toISOString(),
    config: {
      twilio_configured: !!TWILIO_ACCOUNT_SID,
      openai_configured: !!OPENAI_API_KEY,
      zadarma_configured: !!ZADARMA_SIP_USER,
      base_url: BASE_URL
    }
  });
});

// Test endpoint
app.get('/test', (req, res) => {
  res.json({
    message: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!',
    timestamp: new Date().toISOString(),
    endpoints: [
      'GET /health',
      'GET /test',
      'POST /api/make-ai-call',
      'POST /api/bulk-ai-',
      'POST /handle-outbound-call',
      'POST /process-customer-response'
    ]
  });
});

// === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø AI –ó–í–û–ù–ö–ê ===
app.post('/api/make-ai-call', async (req, res) => {
  console.log('üî• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ AI –∑–≤–æ–Ω–æ–∫');
  console.log('Body:', req.body);
  
  try {
    const { phone_number, customer_name, script_context } = req.body;
    
    if (!phone_number) {
      return res.status(400).json({ 
        error: 'phone_number –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        received_body: req.body 
      });
    }

    if (!client) {
      return res.status(500).json({ 
        error: 'Twilio –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ TWILIO_ACCOUNT_SID –∏ TWILIO_AUTH_TOKEN'
      });
    }

    console.log(`üìû –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º AI –∑–≤–æ–Ω–æ–∫ –Ω–∞ ${phone_number}`);

// –í —Ñ—É–Ω–∫—Ü–∏–∏ app.post('/api/make-ai-call') –∑–∞–º–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞:
const call = await client.calls.create({
  to: phone_number,  // –æ–±—ã—á–Ω—ã–π –Ω–æ–º–µ—Ä –±–µ–∑ SIP
  from: '+16105357813',  // –≤–∞—à —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä
  url: `${BASE_URL}/handle-outbound-call?phone=${encodeURIComponent(phone_number)}&name=${encodeURIComponent(customer_name || '')}`,
  statusCallback: `${BASE_URL}/call-status`,
  statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'],
  record: true
});

    console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω:', call.sid);

    res.json({
      success: true,
      call_sid: call.sid,
      message: `AI –∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${phone_number}`,
      customer_name: customer_name,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∑–≤–æ–Ω–∫–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –ò–°–•–û–î–Ø–©–ï–ì–û –ó–í–û–ù–ö–ê ===
app.post('/handle-outbound-call', (req, res) => {
  const callSid = req.body.CallSid;
  const customerPhone = req.query.phone;
  const customerName = req.query.name;

  console.log(`üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ ${callSid} –Ω–∞ ${customerPhone}`);

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  activeConversations.set(callSid, {
    phone: customerPhone,
    name: customerName,
    messages: [],
    startTime: new Date(),
    stage: 'greeting'
  });

  const twiml = new twilio.twiml.VoiceResponse();

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const greeting = generateGreeting(customerName);
  twiml.say({
    voice: 'Polly.Joanna',
    language: 'uk-UA'
  }, greeting);

  // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
  const gather = twiml.gather({
    speechTimeout: 'auto',
    timeout: 10,
    speechModel: 'experimental_conversations',
    language: 'uk-UA',
    enhanced: true,
    action: '/process-customer-response',
    method: 'POST'
  });

  // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –º–æ–ª—á–∏—Ç
  twiml.say({
    voice: 'Polly.Joanna',
    language: 'uk-UA'
  }, '–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!');
  
  twiml.hangup();

  res.type('text/xml');
  res.send(twiml.toString());
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –ö–õ–ò–ï–ù–¢–ê ===
app.post('/process-customer-response', async (req, res) => {
  const callSid = req.body.CallSid;
  const speechResult = req.body.SpeechResult;
  const confidence = req.body.Confidence;

  console.log(`üé§ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª: "${speechResult}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence})`);

  const conversation = activeConversations.get(callSid);
  if (!conversation) {
    console.log('‚ùå –†–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', callSid);
    return res.status(404).send('–†–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  const twiml = new twilio.twiml.VoiceResponse();

  try {
    // –ï—Å–ª–∏ —Ä–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —á–µ—Ç–∫–æ
    if (!speechResult || confidence < 0.5) {
      twiml.say({
        voice: 'Polly.Joanna',
        language: 'uk-UA'
      }, '–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏?');

      const gather = twiml.gather({
        speechTimeout: 'auto',
        timeout: 10,
        action: '/process-customer-response'
      });

      return res.type('text/xml').send(twiml.toString());
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conversation.messages.push({ 
      role: 'user', 
      content: speechResult,
      timestamp: new Date()
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
    const aiResponse = await generateAIResponse(conversation);
    
    conversation.messages.push({ 
      role: 'assistant', 
      content: aiResponse,
      timestamp: new Date()
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    updateConversationStage(conversation, speechResult, aiResponse);

    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI
    twiml.say({
      voice: 'Polly.Joanna',
      language: 'uk-UA'
    }, aiResponse);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if (shouldEndCall(aiResponse, conversation)) {
      twiml.say({
        voice: 'Polly.Joanna',
        language: 'uk-UA'
      }, '–î—è–∫—É—é –∑–∞ —á–∞—Å! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!');
      twiml.hangup();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞
      await saveCallResult(conversation);
      activeConversations.delete(callSid);
      
    } else {
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
      const gather = twiml.gather({
        speechTimeout: 'auto',
        timeout: 15,
        action: '/process-customer-response',
        speechModel: 'experimental_conversations',
        language: 'uk-UA'
      });

      // –ï—Å–ª–∏ –¥–æ–ª–≥–æ –º–æ–ª—á–∏—Ç
      twiml.say('–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É! –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!');
      twiml.hangup();
    }

    res.type('text/xml');
    res.send(twiml.toString());

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    
    twiml.say({
      voice: 'Polly.Joanna',
      language: 'uk-UA'
    }, '–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –≤–∞–º –ø—ñ–∑–Ω—ñ—à–µ.');
    twiml.hangup();
    
    res.type('text/xml');
    res.send(twiml.toString());
  }
});

// === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø ===
function generateGreeting(customerName) {
  const greetings = [
    `–ü—Ä–∏–≤—ñ—Ç${customerName ? `, ${customerName}` : ''}! –¶–µ –û–ª–µ–Ω–∞ –∑ –∫–æ–º–ø–∞–Ω—ñ—ó EMME3D. –ú–∏ –¥—Ä—É–∫—É—î–º–æ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –Ω–∞ 3D –ø—Ä–∏–Ω—Ç–µ—Ä—ñ. –£ –≤–∞—Å —î —Ö–≤–∏–ª–∏–Ω–∫–∞?`,
    
    `–î–æ–±—Ä–æ–≥–æ –¥–Ω—è${customerName ? `, ${customerName}` : ''}! –î–∑–≤–æ–Ω—é –∑ EMME3D. –ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –∞–≤—Ç–æ–≤–ª–∞—Å–Ω–∏–∫–∞–º –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ —á–µ—Ä–µ–∑ 3D –¥—Ä—É–∫. –ú–æ–∂—É —Ä–æ–∑–∫–∞–∑–∞—Ç–∏ –±—ñ–ª—å—à–µ?`
  ];
  
  return greetings[Math.floor(Math.random() * greetings.length)];
}

// === –ì–ï–ù–ï–†–ê–¶–ò–Ø AI –û–¢–í–ï–¢–ê ===
async function generateAIResponse(conversation) {
  if (!openai) {
    return '–í–∏–±–∞—á—Ç–µ, —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ AI. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –ø—ñ–∑–Ω—ñ—à–µ –Ω–∞ +16105357813.';
  }

  const systemPrompt = `–¢–∏ - –û–ª–µ–Ω–∞, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∫–æ–º–ø–∞–Ω—ñ—ó EMME3D (emme3d.com.ua), —â–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ 3D-–¥—Ä—É—Ü—ñ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω.

–ú–ï–¢–ê: –ü–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø–æ—Å–ª—É–≥–∞–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ—Å—Ç—å –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.

–í–ê–ñ–õ–ò–í–Ü –ü–†–ê–í–ò–õ–ê:
1. –ì–æ–≤–æ—Ä–∏ –ö–û–†–û–¢–ö–û - –º–∞–∫—Å–∏–º—É–º 1-2 —Ä–µ—á–µ–Ω–Ω—è
2. –ë—É–¥—å –ø—Ä–∏—Ä–æ–¥–Ω–æ—é —Ç–∞ –¥—Ä—É–∂–Ω—å–æ—é  
3. –ù–µ –Ω–∞–ø–æ–ª—è–≥–∞–π —è–∫—â–æ –∫–ª—ñ—î–Ω—Ç –Ω–µ —Ü—ñ–∫–∞–≤–∏—Ç—å—Å—è
4. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –≤–∏—Ä—ñ—à–µ–Ω–Ω—ñ –ø—Ä–æ–±–ª–µ–º –∫–ª—ñ—î–Ω—Ç–∞
5. –ó–∞–≤–∂–¥–∏ –ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–æ–ø–æ–º–æ–≥—É

–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:
- –î—Ä—É–∫—É—î–º–æ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ —è–∫—ñ –≤–∞–∂–∫–æ –∑–Ω–∞–π—Ç–∏
- –ü—Ä–∞—Ü—é—î–º–æ –∑ —É—Å—ñ–º–∞ –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ
- –®–≤–∏–¥–∫–µ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è: 1-3 –¥–Ω—ñ
- –í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å –¥—Ä—É–∫—É PLA/ABS/PETG
- –ú–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ —Ñ–æ—Ç–æ, –∫—Ä–µ—Å–ª–µ–Ω–Ω—é –∞–±–æ –∑—Ä–∞–∑–∫—É
- –¢–µ–ª–µ—Ñ–æ–Ω: +380914811639
- –°–∞–π—Ç: emme3d.com.ua

–°—Ç–∞–¥—ñ—è —Ä–æ–∑–º–æ–≤–∏: ${conversation.stage}
–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞: ${conversation.phone}`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt },
        ...conversation.messages.slice(-6)
      ],
      max_tokens: 80,
      temperature: 0.8
    });

    return completion.choices[0].message.content;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ OpenAI:', error);
    return '–í–∏–±–∞—á—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏? –ù–µ –∑–æ–≤—Å—ñ–º –≤–∞—Å –∑—Ä–æ–∑—É–º—ñ–≤.';
  }
}

// === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ê–î–ò–ò –†–ê–ó–ì–û–í–û–†–ê ===
function updateConversationStage(conversation, userInput, aiResponse) {
  const input = userInput.toLowerCase();
  
  if (input.includes('–Ω–µ —Ü—ñ–∫–∞–≤–∏—Ç—å') || input.includes('–Ω–µ —Ç—Ä–µ–±–∞') || input.includes('–Ω–µ —Ö–æ—á—É')) {
    conversation.stage = 'rejection';
  } else if (input.includes('—Ü—ñ–∫–∞–≤') || input.includes('—Ä–æ–∑–∫–∞–∂—ñ—Ç—å') || input.includes('—Ç–∞–∫')) {
    conversation.stage = 'interested';
  } else if (input.includes('bmw') || input.includes('audi') || input.includes('mercedes') || 
             input.includes('–∑–∞–ø—á–∞—Å—Ç–∏') || input.includes('–¥–µ—Ç–∞–ª—å')) {
    conversation.stage = 'discussing_needs';
  } else if (input.includes('–ø–æ–¥—É–º–∞—é') || input.includes('–ø—ñ–∑–Ω—ñ—à–µ')) {
    conversation.stage = 'maybe_later';
  }
}

// === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ó–í–û–ù–ö–ê ===
function shouldEndCall(aiResponse, conversation) {
  const response = aiResponse.toLowerCase();
  const maxDuration = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
  const currentDuration = new Date() - conversation.startTime;
  
  return (
    response.includes('–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è') ||
    response.includes('–≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è') ||
    conversation.stage === 'rejection' ||
    conversation.messages.length > 10 ||
    currentDuration > maxDuration
  );
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ó–í–û–ù–ö–ê ===
async function saveCallResult(conversation) {
  try {
    const result = {
      phone: conversation.phone,
      name: conversation.name,
      duration: Math.round((new Date() - conversation.startTime) / 1000),
      messages_count: conversation.messages.length,
      stage: conversation.stage,
      transcript: conversation.messages,
      completed_at: new Date().toISOString()
    };

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞:', result);
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
  }
}

// === –°–¢–ê–¢–£–° –ó–í–û–ù–ö–û–í ===
app.post('/call-status', (req, res) => {
  const callSid = req.body.CallSid;
  const callStatus = req.body.CallStatus;
  
  console.log(`üìä –ó–≤–æ–Ω–æ–∫ ${callSid}: —Å—Ç–∞—Ç—É—Å ${callStatus}`);
  
  if (callStatus === 'completed' || callStatus === 'failed') {
    const conversation = activeConversations.get(callSid);
    if (conversation) {
      saveCallResult(conversation);
      activeConversations.delete(callSid);
    }
  }
  
  res.status(200).send('OK');
});

// === –ú–ê–°–°–û–í–´–ï –ó–í–û–ù–ö–ò –î–õ–Ø N8N ===
app.post('/api/bulk-ai-calls', async (req, res) => {
  try {
    const { contacts } = req.body;
    
    if (!contacts || !Array.isArray(contacts)) {
      return res.status(400).json({ error: 'contacts array is required' });
    }

    if (!client) {
      return res.status(500).json({ error: 'Twilio –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    const results = [];
    
    console.log(`üìû –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤—ã—Ö AI –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`);
    
    for (let i = 0; i < contacts.length; i++) {
      const contact = contacts[i];
      
      try {
        const call = await client.calls.create({
          to: `sip:${phone_number.replace('+', '')}@pbx.zadarma.com`,
          from: `380914811639@380914811639.sip.twilio.com`,
          sipAuthUsername: process.env.ZADARMA_SIP_USER,
          sipAuthPassword: process.env.ZADARMA_SIP_PASSWORD,
          url: `${BASE_URL}/handle-outbound-call?phone=${encodeURIComponent(phone_number)}&name=${encodeURIComponent(customer_name || '')}`,
          statusCallback: `${BASE_URL}/call-status`,
          record: true
        });

        results.push({
          phone: contact.phone_number,
          call_sid: callResult.sid,
          status: 'initiated'
        });

        console.log(`‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: ${contact.phone_number} (${callResult.sid})`);

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏
        if (i < contacts.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 30000)); // 30 —Å–µ–∫—É–Ω–¥
        }

      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞ –Ω–∞ ${contact.phone_number}: ${error.message}`);
        results.push({
          phone: contact.phone_number,
          error: error.message,
          status: 'failed'
        });
      }
    }

    res.json({
      success: true,
      total_contacts: contacts.length,
      results: results
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤:', error);
    res.status(500).json({ error: error.message });
  }
});

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–´–• –ó–í–û–ù–ö–û–í ===
app.get('/api/active-calls', (req, res) => {
  const calls = Array.from(activeConversations.entries()).map(([callSid, conv]) => ({
    call_sid: callSid,
    phone: conv.phone,
    name: conv.name,
    stage: conv.stage,
    duration: Math.round((new Date() - conv.startTime) / 1000),
    messages_count: conv.messages.length
  }));

  res.json({
    active_calls: calls.length,
    calls: calls
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ EMME3D Voice AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('üìû –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
  console.log('  POST /api/make-ai-call - –û–¥–∏–Ω–æ—á–Ω—ã–π AI –∑–≤–æ–Ω–æ–∫');  
  console.log('  POST /api/bulk-ai-calls - –ú–∞—Å—Å–æ–≤—ã–µ AI –∑–≤–æ–Ω–∫–∏ –∏–∑ n8n');
  console.log('  GET /api/active-calls - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏');
  console.log('  GET /health - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã');
});
// === –û–ë–†–ê–ë–û–¢–ö–ê SIP –í–´–ó–û–í–û–í –û–¢ ZADARMA ===
app.post('/handle-sip-call', (req, res) => {
  console.log('üìû –ü–æ–ª—É—á–µ–Ω SIP –≤—ã–∑–æ–≤ –æ—Ç Zadarma');
  console.log('SIP Headers:', req.body);
  
  const callSid = req.body.CallSid;
  const fromNumber = req.body.From; // –Ω–æ–º–µ—Ä –æ—Ç Zadarma
  const customerName = req.query.name || '';

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  activeConversations.set(callSid, {
    phone: fromNumber,
    name: customerName,
    messages: [],
    startTime: new Date(),
    stage: 'greeting',
    provider: 'zadarma-sip'
  });

  const twiml = new twilio.twiml.VoiceResponse();

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º
  const greeting = generateGreeting(customerName);
  twiml.say({
    voice: 'Polly.Joanna',
    language: 'uk-UA'
  }, greeting);

  // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
  const gather = twiml.gather({
    speechTimeout: 'auto',
    timeout: 10,
    speechModel: 'experimental_conversations',
    language: 'uk-UA',
    enhanced: true,
    action: '/process-customer-response',
    method: 'POST'
  });

  twiml.say({
    voice: 'Polly.Joanna',
    language: 'uk-UA'
  }, '–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!');
  
  twiml.hangup();

  res.type('text/xml');
  res.send(twiml.toString());
});










