/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
 */
app.post('/handle-cold-call', (req, res) => {
    const { CallSid } = req.body;
    const { contact_id, phone, name } = req.query;

    console.log(`üìû –•–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫ ${CallSid} –∫–æ–Ω—Ç–∞–∫—Ç—É ${contact_id}: ${phone}`);

    activeConversations.set(CallSid, {
        contact_id, phone, name,
        messages: [],
        startTime: new Date(),
        stage: 'greeting'
    });
    
    saveCallToSupabase(contact_id, CallSid, phone, name, 'in-progress', 'greeting');

    const twiml = new twilio.twiml.VoiceResponse();
    const greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –ï–ª–µ–Ω–∞ –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ EMME3D. –ú—ã –ø–µ—á–∞—Ç–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –Ω–∞ 3D –ø—Ä–∏–Ω—Ç–µ—Ä–µ. –í–∞–º —É–¥–æ–±–Ω–æ —Å–µ–π—á–∞—Å —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å?`;
    
    twiml.say({ voice: 'Polly.Tatyana', language: 'ru-RU' }, greeting);
    
    const gather = twiml.gather({
        speechTimeout: 'auto',
        timeout: 10,
        language: 'ru-RU',
        action: '/process-customer-response',
        method: 'POST',
        enhanced: true, // –î–û–ë–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        speechModel: 'experimental_conversations' // –î–û–ë–ê–í–õ–ï–ù–û: –ú–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
    });
    
    twiml.say({ voice: 'Polly.Tatyana', language: 'ru-RU' }, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!');
    twiml.hangup();

    res.type('text/xml');
    res.send(twiml.toString());
});

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å n8n
 */
app.post('/process-customer-response', async (req, res) => {
    const { CallSid, SpeechResult, Confidence } = req.body;
    console.log(`üé§ –ö–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª: "${SpeechResult}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Confidence})`);

    const conversation = activeConversations.get(CallSid);
    if (!conversation) {
        return res.status(404).send('–†–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const twiml = new twilio.twiml.VoiceResponse();
    
    try {
        if (!SpeechResult || Confidence < 0.4) {
            twiml.say({ voice: 'Polly.Tatyana', language: 'ru-RU' }, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?');
        } else {
            conversation.messages.push({ role: 'user', content: SpeechResult });
            updateConversationStage(conversation, SpeechResult);

            const sessionId = `voice_${CallSid}`;
            const aiResponse = await callN8NAgent(SpeechResult, sessionId, conversation.phone, conversation.name);
            
            conversation.messages.push({ role: 'assistant', content: aiResponse });

            twiml.say({ voice: 'Polly.Tatyana', language: 'ru-RU' }, aiResponse);
            
            if (shouldEndCall(aiResponse, conversation)) {
                twiml.hangup();
                await updateCallResult(conversation.phone, conversation);
                activeConversations.delete(CallSid);
            }
        }
        
        if (!twiml.response.Hangup) {
            const gather = twiml.gather({ // –ü–æ–≤—Ç–æ—Ä—è–µ–º gather —Å —Ç–µ–º–∏ –∂–µ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
                speechTimeout: 'auto',
                timeout: 10,
                language: 'ru-RU',
                action: '/process-customer-response',
                enhanced: true, // –î–û–ë–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                speechModel: 'experimental_conversations' // –î–û–ë–ê–í–õ–ï–ù–û: –ú–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
            });
            twiml.say({ voice: 'Polly.Tatyana', language: 'ru-RU' }, '–Ø –≤–∞—Å –Ω–µ —É—Å–ª—ã—à–∞–ª–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
            twiml.hangup();
        }

        res.type('text/xml').send(twiml.toString());
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        twiml.say({ voice: 'Polly.Tatyana', language: 'ru-RU' }, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.');
        twiml.hangup();
        res.type('text/xml').send(twiml.toString());
    }
});
